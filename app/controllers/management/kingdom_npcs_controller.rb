class Management::KingdomNpcsController < ApplicationController
	before_filter :authenticate
	before_filter :king_filter

	layout 'main'

	def index
		list
		render :action => 'list'
	end

	# GETs should be safe (see http://www.w3.org/2001/tag/doc/whenToUseGet.html)
	verify :method => :post, :only => [ :hire_merchant, :hire_guard, :turn_away ],				 :redirect_to => { :action => :list }

	def list
		@npcs = session[:kingdom].npcs.find(:all, :conditions => ['is_hired = ?', true])
		@npcs_for_hire = session[:kingdom].npcs.find(:all, :conditions => ['is_hired = ?', false])
	end

	def show
		@npc = session[:kingdom].npcs.find(params[:id])
	end

	def assign_store
		@npc = session[:kingdom].npcs.find(params[:id])
		if session[:kingdom].kingdom_empty_shops.size == 0 && @npc.npc_division == SpecialCode.get_code('npc_division','merchant')
			flash[:notice] = 'No available storefronts for the merchants.'
			redirect_to :action => 'list'
		elsif @npc.is_hired
			flash[:notice] = 'This merchant already has a shop!'
			redirect_to :action => 'list'
		else
			@shops = session[:kingdom].kingdom_empty_shops
		end	
	end
	
	#Hire a guard
	def hire_guard
		@npc = Npc.find(params[:id])
		@npc.is_hired = true
		@npc.save
		redirect_to :action => 'list'
	end
	
	#revisit this when storefront is set.
	def hire_merchant
		@npc = Npc.find(params[:id])
		if (params[:level_map].nil? || params[:level_map][:id] == "") && !session[:kingdom].kingdom_empty_shops[0].nil?
			@level_map = session[:kingdom].kingdom_empty_shops[0].level_map
		elsif session[:kingdom].kingdom_empty_shops.exists?(params[:level_map][:id])
			@level_map = session[:kingdom].kingdom_empty_shops.find(params[:level_map][:id]).level_map
		else
			flash[:notice] = 'No store found for the NPC to set up shop.'
			redirect_to :action => 'list'
			return false
		end
		
		if npc_is_allied
			establish_npc(@npc,@level_map)

			#THAT KINGDOM STORE IS NO LONGER EMPTY
			@level_map.kingdom_empty_shops.first.destroy
			
			@npc.is_hired = true
			
			if @npc.save
				flash[:notice] += @npc.name + ' joined the ranks of your kingdom.'
			else
				flash[:notice] += 'Failed to hire the npc.'
			end
		else
			flash[:notice] = 'NPC cannot be hired by you.'
		end
		redirect_to :action => 'list'
	end

	def turn_away
		@npc = session[:kingdom].npcs.find(params[:id])
		if npc_is_allied
			if @npc.is_hired && @npc.npc_division == SpecialCode.get_code('npc_division','merchant')
				#PUT THAT STOREFRONT BACK INTO CIRCULATION
				@kingdom_empty_shop = KingdomEmptyShop.new
				@kingdom_empty_shop.kingdom_id = session[:kingdom][:id]
				@kingdom_empty_shop.level_map_id = @npc.event_npcs.last.level_map_id
				
				@kingdom_empty_shop.save
				
				destroy_npc_event(@npc)
			end
		
			@npc.kingdom_id = nil
			@npc.is_hired = false
		
			if @npc.save
				flash[:notice] = "NPC turned away.\n"
			else
				flash[:notice] = "NPC could not be turned away.\n"
			end
		else
			flash[:notice] = "...NPC is not allied with you!\n"
		end
		
		redirect_to :action => 'list'
	end
	
protected
	def npc_is_allied
		if @npc.kingdom_id != session[:kingdom][:id]
			return false
		else
			return true
		end
	end

	def establish_npc(npc,level_map)
		#MAKE EVENT	
		@event = Event.new
		@event.kingdom_id = -1
		@event.player_id = -1
		@event.event_rep_type = SpecialCode.get_code('event_rep_type','unlimited')
		@event.name = "\nSYSTEM GENERATED"		 #name to anounce this event was generated by the system
		@event.event_type = SpecialCode.get_code('event_type','npc')
		@event.armed = true
		@event.cost = 0
		
		if @event.save
			flash[:notice] = "Created event\n"
		else
			#break code in case event fails to save while developeing this stuff
			flash[:n][:n]
		end
	
		#MAKE SUB EVENT
		@event_npc = EventNpc.new
		@event_npc.event_id = @event.id
		@event_npc.npc_id = @npc.id
		@event_npc.level_map_id = @level_map.id
		
		if @event_npc.save
			flash[:notice] += "Created event_npc\n"
		else
			#break code in case event fails to save while developeing this stuff
			flash[:n][:n]
		end
		
		#LINK NPC's EVENT TO FEATURE
		@feature_event = FeatureEvent.new
		@feature_event.feature_id = level_map.feature_id
		@feature_event.event_id = @event.id
		@feature_event.chance = 100.0
		@feature_event.priority = 42
		@feature_event.choice = true
		
		if @feature_event.save
			flash[:notice] += "Created feature_event\n"
		else
			flash[:n][:n]
		end
	end
	
end
